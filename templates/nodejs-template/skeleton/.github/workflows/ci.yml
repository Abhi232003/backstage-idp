name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      SERVICE_NAME: my-service-name

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Check build tag
        run: |
          echo "SERVICE_NAME=${{ env.SERVICE_NAME }}"
          echo "github.sha=${{ github.sha }}"
          if [ -z "${{ env.SERVICE_NAME }}" ] || [ -z "${{ github.sha }}" ]; then
            echo "‚ùå Missing required tag inputs"
            exit 1
          fi

      - name: Build Docker image
        run: |
          echo "Building image: ${{ env.SERVICE_NAME }}:${{ github.sha }}"
          docker build -t ${{ env.SERVICE_NAME }}:${{ github.sha }} .

      - name: Test Docker container
        run: |
          PORT=$(( ( RANDOM % 1000 )  + 8000 ))
          docker run -d -p $PORT:3001 --name test-container ${{ env.SERVICE_NAME }}:${{ github.sha }}
          sleep 10
          curl -f http://localhost:$PORT || (docker logs test-container && exit 1)
          docker stop test-container
          docker rm test-container

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    env:
      SERVICE_NAME: my-service-name
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_REGION: us-central1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate GCP_PROJECT_ID
        run: |
          if [ -z "${{ env.GCP_PROJECT_ID }}" ]; then
            echo "‚ùå GCP_PROJECT_ID is not set. Please add it to GitHub Secrets."
            exit 1
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Ensure Docker repository exists
        run: |
          if ! gcloud artifacts repositories describe ${{ env.SERVICE_NAME }} \
            --location=${{ env.GCP_REGION }} >/dev/null 2>&1; then
            gcloud artifacts repositories create ${{ env.SERVICE_NAME }} \
              --repository-format=docker \
              --location=${{ env.GCP_REGION }} \
              --description="Container repository for ${{ env.SERVICE_NAME }}"
          fi

      - name: Build and push Docker image
        run: |
          IMAGE=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}
          echo "Building image: $IMAGE:${{ github.sha }}"
          docker build -t $IMAGE:${{ github.sha }} -t $IMAGE:latest .
          docker push $IMAGE:${{ github.sha }}
          docker push $IMAGE:latest

      - name: Deploy to Cloud Run
        run: |
          IMAGE=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:latest
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image $IMAGE \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --port 3001 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 10 \
            --set-env-vars="NODE_ENV=production"

      - name: Get Cloud Run URL
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          echo "üåê Service deployed at: $URL"
          echo "SERVICE_URL<<EOF" >> $GITHUB_ENV
          echo "$URL" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV