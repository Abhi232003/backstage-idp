name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging, dev ]
  pull_request:
    branches: [ main, staging ]

env:
  SERVICE_NAME: ${{ '${{ values.component_id }}' }}
  GCP_REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Verify package.json exists
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          if [ ! -f package.json ]; then
            echo "❌ package.json not found in $(pwd)"
            exit 1
          fi
          echo "✅ package.json found"

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Check build tag
        run: |
          echo "SERVICE_NAME=${{ '${{' }} env.SERVICE_NAME }}"
          echo "GITHUB_SHA=${{ '${{' }} github.sha }}"
          if [ -z "${{ '${{' }} env.SERVICE_NAME }}" ] || [ -z "${{ '${{' }} github.sha }}" ]; then
            echo "❌ Missing required tag inputs"
            exit 1
          fi

      - name: Build Docker image
        run: |
          TAG=${{ '${{' }} github.sha }}
          echo "Building image: ${{ '${{' }} env.SERVICE_NAME }}:$TAG"
          docker build -t ${{ '${{' }} env.SERVICE_NAME }}:$TAG .

      - name: Test Docker container
        run: |
          TAG=${{ '${{' }} github.sha }}
          PORT=$(( ( RANDOM % 1000 )  + 8000 ))
          docker run -d -p $PORT:3001 --name test-container ${{ '${{' }} env.SERVICE_NAME }}:$TAG
          sleep 10
          curl -f http://localhost:$PORT || (docker logs test-container && exit 1)
          docker stop test-container
          docker rm test-container

  build-and-deploy-dev:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate GCP_PROJECT_ID_DEV
        run: |
          if [ -z "${{ '${{' }} secrets.GCP_PROJECT_ID_DEV }}" ] && [ -z "${{ '${{' }} secrets.GCP_PROJECT_ID }}" ]; then
            echo "❌ Neither GCP_PROJECT_ID_DEV nor GCP_PROJECT_ID is set."
            echo "Please add one of them to GitHub Secrets."
            echo "For multi-environment setup, use GCP_PROJECT_ID_DEV"
            echo "For single-environment setup, use GCP_PROJECT_ID"
            exit 1
          fi

      - name: Set Project ID and SA Key
        run: |
          if [ -n "${{ '${{' }} secrets.GCP_PROJECT_ID_DEV }}" ]; then
            echo "PROJECT_ID=${{ '${{' }} secrets.GCP_PROJECT_ID_DEV }}" >> $GITHUB_ENV
            echo "Using dev-specific secrets"
          else
            echo "PROJECT_ID=${{ '${{' }} secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
            echo "Using shared secrets"
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ '${{' }} secrets.GCP_SA_KEY_DEV || secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ '${{' }} env.GCP_REGION }}-docker.pkg.dev

      - name: Ensure Docker repository exists
        run: |
          REPO=${{ '${{' }} env.SERVICE_NAME }}
          gcloud artifacts repositories describe $REPO \
            --location=${{ '${{' }} env.GCP_REGION }} >/dev/null 2>&1 || \
          gcloud artifacts repositories create $REPO \
            --repository-format=docker \
            --location=${{ '${{' }} env.GCP_REGION }} \
            --description="Container repo for $REPO"

      - name: Build and push Docker image
        run: |
          PROJECT_ID=$(echo "${{ '${{' }} env.PROJECT_ID }}" | tr -d '\n\r')
          REGION="${{ '${{' }} env.GCP_REGION }}"
          SERVICE="${{ '${{' }} env.SERVICE_NAME }}"
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${SERVICE}/${SERVICE}"
          TAG="dev-${{ '${{' }} github.sha }}"
          echo "Building image: ${IMAGE}:${TAG}"
          docker build -t "${IMAGE}:${TAG}" -t "${IMAGE}:dev-latest" .
          docker push "${IMAGE}:${TAG}"
          docker push "${IMAGE}:dev-latest"

      - name: Deploy to Cloud Run (Development)
        run: |
          PROJECT_ID=$(echo "${{ '${{' }} env.PROJECT_ID }}" | tr -d '\n\r')
          REGION="${{ '${{' }} env.GCP_REGION }}"
          SERVICE="${{ '${{' }} env.SERVICE_NAME }}"
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${SERVICE}/${SERVICE}:dev-latest"
          echo "Deploying image: ${IMAGE}"
          gcloud run deploy "${SERVICE}-dev" \
            --image "${IMAGE}" \
            --platform managed \
            --region "${REGION}" \
            --allow-unauthenticated \
            --port 3001 \
            --memory 256Mi \
            --cpu 0.5 \
            --max-instances 3 \
            --set-env-vars="NODE_ENV=development,SERVICE_VERSION=dev" \
            --tag dev

      - name: Get Cloud Run URL
        run: |
          URL=$(gcloud run services describe ${{ '${{' }} env.SERVICE_NAME }}-dev \
            --region=${{ '${{' }} env.GCP_REGION }} \
            --format='value(status.url)')
          echo "🌐 Development service deployed at: $URL"

  build-and-deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate GCP_PROJECT_ID_STAGING
        run: |
          if [ -z "${{ '${{' }} secrets.GCP_PROJECT_ID_STAGING }}" ] && [ -z "${{ '${{' }} secrets.GCP_PROJECT_ID }}" ]; then
            echo "❌ Neither GCP_PROJECT_ID_STAGING nor GCP_PROJECT_ID is set."
            echo "Please add one of them to GitHub Secrets."
            exit 1
          fi

      - name: Set Project ID and SA Key
        run: |
          if [ -n "${{ '${{' }} secrets.GCP_PROJECT_ID_STAGING }}" ]; then
            echo "PROJECT_ID=${{ '${{' }} secrets.GCP_PROJECT_ID_STAGING }}" >> $GITHUB_ENV
            echo "Using staging-specific secrets"
          else
            echo "PROJECT_ID=${{ '${{' }} secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
            echo "Using shared secrets"
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ '${{' }} secrets.GCP_SA_KEY_STAGING || secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ '${{' }} env.GCP_REGION }}-docker.pkg.dev

      - name: Ensure Docker repository exists
        run: |
          REPO=${{ '${{' }} env.SERVICE_NAME }}
          gcloud artifacts repositories describe $REPO \
            --location=${{ '${{' }} env.GCP_REGION }} >/dev/null 2>&1 || \
          gcloud artifacts repositories create $REPO \
            --repository-format=docker \
            --location=${{ '${{' }} env.GCP_REGION }} \
            --description="Container repo for $REPO"

      - name: Build and push Docker image
        run: |
          PROJECT_ID=$(echo "${{ '${{' }} env.PROJECT_ID }}" | tr -d '\n\r')
          REGION="${{ '${{' }} env.GCP_REGION }}"
          SERVICE="${{ '${{' }} env.SERVICE_NAME }}"
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${SERVICE}/${SERVICE}"
          TAG="staging-${{ '${{' }} github.sha }}"
          echo "Building image: ${IMAGE}:${TAG}"
          docker build -t "${IMAGE}:${TAG}" -t "${IMAGE}:staging-latest" .
          docker push "${IMAGE}:${TAG}"
          docker push "${IMAGE}:staging-latest"

      - name: Deploy to Cloud Run (Staging)
        run: |
          PROJECT_ID=$(echo "${{ '${{' }} env.PROJECT_ID }}" | tr -d '\n\r')
          REGION="${{ '${{' }} env.GCP_REGION }}"
          SERVICE="${{ '${{' }} env.SERVICE_NAME }}"
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${SERVICE}/${SERVICE}:staging-latest"
          echo "Deploying image: ${IMAGE}"
          gcloud run deploy "${SERVICE}-staging" \
            --image "${IMAGE}" \
            --platform managed \
            --region "${REGION}" \
            --allow-unauthenticated \
            --port 3001 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 5 \
            --set-env-vars="NODE_ENV=staging,SERVICE_VERSION=staging" \
            --tag staging

      - name: Get Cloud Run URL
        run: |
          URL=$(gcloud run services describe ${{ '${{' }} env.SERVICE_NAME }}-staging \
            --region=${{ '${{' }} env.GCP_REGION }} \
            --format='value(status.url)')
          echo "🌐 Staging service deployed at: $URL"

  build-and-deploy-prod:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate GCP_PROJECT_ID_PROD
        run: |
          if [ -z "${{ '${{' }} secrets.GCP_PROJECT_ID_PROD }}" ] && [ -z "${{ '${{' }} secrets.GCP_PROJECT_ID }}" ]; then
            echo "❌ Neither GCP_PROJECT_ID_PROD nor GCP_PROJECT_ID is set."
            echo "Please add one of them to GitHub Secrets."
            exit 1
          fi

      - name: Set Project ID and SA Key
        run: |
          if [ -n "${{ '${{' }} secrets.GCP_PROJECT_ID_PROD }}" ]; then
            echo "PROJECT_ID=${{ '${{' }} secrets.GCP_PROJECT_ID_PROD }}" >> $GITHUB_ENV
            echo "Using prod-specific secrets"
          else
            echo "PROJECT_ID=${{ '${{' }} secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
            echo "Using shared secrets"
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ '${{' }} secrets.GCP_SA_KEY_PROD || secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ '${{' }} env.GCP_REGION }}-docker.pkg.dev

      - name: Ensure Docker repository exists
        run: |
          REPO=${{ '${{' }} env.SERVICE_NAME }}
          gcloud artifacts repositories describe $REPO \
            --location=${{ '${{' }} env.GCP_REGION }} >/dev/null 2>&1 || \
          gcloud artifacts repositories create $REPO \
            --repository-format=docker \
            --location=${{ '${{' }} env.GCP_REGION }} \
            --description="Container repo for $REPO"

      - name: Build and push Docker image
        run: |
          PROJECT_ID=$(echo "${{ '${{' }} env.PROJECT_ID }}" | tr -d '\n\r')
          REGION="${{ '${{' }} env.GCP_REGION }}"
          SERVICE="${{ '${{' }} env.SERVICE_NAME }}"
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${SERVICE}/${SERVICE}"
          TAG="prod-${{ '${{' }} github.sha }}"
          echo "Building image: ${IMAGE}:${TAG}"
          docker build -t "${IMAGE}:${TAG}" -t "${IMAGE}:prod-latest" .
          docker push "${IMAGE}:${TAG}"
          docker push "${IMAGE}:prod-latest"

      - name: Deploy to Cloud Run (Production)
        run: |
          PROJECT_ID=$(echo "${{ '${{' }} env.PROJECT_ID }}" | tr -d '\n\r')
          REGION="${{ '${{' }} env.GCP_REGION }}"
          SERVICE="${{ '${{' }} env.SERVICE_NAME }}"
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${SERVICE}/${SERVICE}:prod-latest"
          echo "Deploying image: ${IMAGE}"
          gcloud run deploy "${SERVICE}" \
            --image "${IMAGE}" \
            --platform managed \
            --region "${REGION}" \
            --allow-unauthenticated \
            --port 3001 \
            --memory 1Gi \
            --cpu 2 \
            --max-instances 5 \
            --set-env-vars="NODE_ENV=production,SERVICE_VERSION=production"

      - name: Get Cloud Run URL
        run: |
          URL=$(gcloud run services describe ${{ '${{' }} env.SERVICE_NAME }} \
            --region=${{ '${{' }} env.GCP_REGION }} \
            --format='value(status.url)')
          echo "🌐 Production service deployed at: $URL"
