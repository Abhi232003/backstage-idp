{% if values.deploymentTarget == 'cloudrun' -%}
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: {{ values.name }}
  annotations:
    run.googleapis.com/ingress: all
    run.googleapis.com/execution-environment: gen2
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/maxScale: "10"
        autoscaling.knative.dev/minScale: "0"
{% if values.database != 'none' -%}
        run.googleapis.com/cloudsql-instances: {{ values.gcpProjectId }}:{{ values.cloudRunRegion }}:{{ values.name }}-db
{% endif -%}
    spec:
      containerConcurrency: 100
      timeoutSeconds: 300
      containers:
      - image: {{ values.cloudRunRegion }}-docker.pkg.dev/{{ values.gcpProjectId }}/{{ values.name }}/{{ values.name }}:latest
        ports:
        - containerPort: 8080
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "Production"
        - name: ASPNETCORE_URLS
          value: "http://+:8080"
        - name: PORT
          value: "8080"
{% if values.database != 'none' -%}
        - name: DB_CONNECTION_NAME
          value: "{{ values.gcpProjectId }}:{{ values.cloudRunRegion }}:{{ values.name }}-db"
        - name: DB_NAME
          value: "{{ values.name | replace('-', '_') }}"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ values.name }}-db-secret
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ values.name }}-db-secret
              key: password
{% endif -%}
{% if values.enableBucket -%}
        - name: GCS_BUCKET_NAME
          value: "{{ values.gcpProjectId }}-{{ values.bucketName or values.name }}-bucket"
{% endif -%}
        resources:
          limits:
            memory: 512Mi
            cpu: 1000m
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          timeoutSeconds: 5
          failureThreshold: 3
{% endif %}
