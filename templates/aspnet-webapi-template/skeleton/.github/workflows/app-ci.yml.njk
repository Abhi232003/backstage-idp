name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths-ignore: ['infra/**', '*.md']
  pull_request:
    branches: [main]
    paths-ignore: ['infra/**', '*.md']
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  IMAGE_NAME: {{ values.name }}
{% if values.deploymentTarget == 'gke' -%}
  GKE_CLUSTER: {{ values.gkeClusterName }}
  GKE_ZONE: {{ values.gkeRegion }}
  DEPLOYMENT_NAME: {{ values.name }}
  NAMESPACE: {{ values.gkeNamespace }}
{% elif values.deploymentTarget == 'cloudrun' -%}
  REGION: {{ values.cloudRunRegion }}
  SERVICE_NAME: {{ values.name }}
{% endif %}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Check for .NET project files
      id: check_dotnet
      run: |
        if find . -name "*.csproj" -o -name "*.sln" | grep -q .; then
          echo "dotnet_found=true" >> $GITHUB_OUTPUT
        else
          echo "dotnet_found=false" >> $GITHUB_OUTPUT
          echo "No .NET project files found. Skipping build."
        fi
    
    - name: Setup .NET
      if: steps.check_dotnet.outputs.dotnet_found == 'true'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      if: steps.check_dotnet.outputs.dotnet_found == 'true'
      run: dotnet restore
    
    - name: Build
      if: steps.check_dotnet.outputs.dotnet_found == 'true'
      run: dotnet build --no-restore --configuration Release
    
    - name: Test
      if: steps.check_dotnet.outputs.dotnet_found == 'true'
      run: dotnet test --no-build --configuration Release --verbosity normal

  deploy:
    name: Deploy to {{ values.deploymentTarget | upper }}
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Check for Dockerfile
      id: check_dockerfile
      run: |
        if [ -f "Dockerfile" ]; then
          echo "dockerfile_found=true" >> $GITHUB_OUTPUT
        else
          echo "dockerfile_found=false" >> $GITHUB_OUTPUT
          echo "No Dockerfile found. Skipping deployment."
        fi
    
    - name: Authenticate to Google Cloud
      if: steps.check_dockerfile.outputs.dockerfile_found == 'true'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Set up Cloud SDK
      if: steps.check_dockerfile.outputs.dockerfile_found == 'true'
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker for Artifact Registry
      if: steps.check_dockerfile.outputs.dockerfile_found == 'true'
      run: gcloud auth configure-docker {{ values.gkeRegion or values.cloudRunRegion }}-docker.pkg.dev
    
    - name: Build and Push Docker Image
      if: steps.check_dockerfile.outputs.dockerfile_found == 'true'
      run: |
        IMAGE_TAG={{ values.gkeRegion or values.cloudRunRegion }}-docker.pkg.dev/$PROJECT_ID/{{ values.name }}/$IMAGE_NAME:$GITHUB_SHA
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

{% if values.deploymentTarget == 'gke' -%}
    - name: Deploy to GKE
      if: steps.check_dockerfile.outputs.dockerfile_found == 'true'
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID
        
        # Update deployment image
        kubectl set image deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=$IMAGE_TAG -n $NAMESPACE
        
        # Wait for rollout to complete
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE
        
        # Get service endpoint
        echo "Application deployed to GKE!"
        kubectl get service $DEPLOYMENT_NAME -n $NAMESPACE

{% elif values.deploymentTarget == 'cloudrun' -%}
    - name: Deploy to Cloud Run
      if: steps.check_dockerfile.outputs.dockerfile_found == 'true'
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image $IMAGE_TAG \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 8080
        
        echo "Application deployed to Cloud Run!"
        gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)'
{% endif %}
